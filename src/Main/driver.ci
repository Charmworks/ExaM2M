// *****************************************************************************
/*!
  \file      src/Main/driver.ci
  \copyright 2020 Charmworks, Inc.
             All rights reserved. See the LICENSE file for details.
  \brief     Charm++ module interface file for Driver
  \details   Charm++ module interface file for Driver
*/
// *****************************************************************************

module driver {

  extern module mesharray;

  include "collidecharm.h";
  include "Controller.hpp";

  namespace exam2m {

    chare [migratable] Driver {
      entry Driver();
      entry void addMesh( const std::string& meshfile );
      entry [reductiontarget] void loaded( std::size_t nelem );
      entry [reductiontarget] void distributed();
      entry [reductiontarget] void mapinserted( std::size_t error );
      entry [reductiontarget] void queried();
      entry [reductiontarget] void responded();
      entry [reductiontarget] void workinserted();
      entry [reductiontarget] void workcreated();
      entry [reductiontarget] void written();
      entry [reductiontarget] void solutionfound();
      entry void meshAdded();

      entry void run() {
        forall [meshid] (0:1,1) {
          when addMesh( const std::string& meshfile ) {
            // Create initial MeshData struct, and begin mesh loading
            serial { initMeshData( meshfile ); }

            // Once loaded, update number of elements and partition
            when loaded[meshid]( std::size_t nelem ) serial {
              updatenelems(meshid, nelem);

              m_meshes[meshid].m_partitioner.partition(
                  m_meshes[meshid].m_nchare );
            }
            when distributed[meshid]() serial {
              m_meshes[meshid].m_partitioner.map();
            }
            when mapinserted[meshid]( std::size_t error ) serial {
              if (error) {
                CkAbort("\n>>> ERROR: A Mapper chare was not assigned any mesh "
                  "elements. This can happen in SMP-mode with a large +ppn "
                  "parameter (number of worker threads per logical node) and is "
                  "most likely the fault of the mesh partitioning algorithm not "
                  "tolerating the case when it is asked to divide the "
                  "computational domain into a number of partitions different "
                  "than the number of ranks it is called on, i.e., in case of "
                  "overdecomposition and/or calling the partitioner in SMP mode "
                  "with +ppn larger than 1. Solution 1: Try a different "
                  "partitioning algorithm (e.g., rcb instead of mj). Solution 2: "
                  "Decrease +ppn.\n");
              } else {
                 m_meshes[meshid].m_mapper.doneInserting();
                 m_meshes[meshid].m_mapper.setup( m_meshes[meshid].m_npoin );
              }
            }
            when queried[meshid]() serial {
              m_meshes[meshid].m_mapper.response();
            }
            when responded[meshid]() serial {
              m_meshes[meshid].m_mapper.create();
            }
            when workinserted[meshid]() serial {
              m_meshes[meshid].m_mesharray.doneInserting();
            }
            when workcreated[meshid]() serial {
              CkPrintf("ExaM2M> Created worker for mesh %i\n", meshid);
              std::cout << "ExaM2M> Mesh " << meshid << " nelem: "
                        << m_meshes[meshid].m_nelem << ", npoin: "
                        << m_meshes[meshid].m_npoin << '\n';
            }
          }
        }

        serial {
          CkPrintf("ExaM2M> Prepared all meshes, "
                   "starting mesh-to-mesh transfer\n");
          m_sourcemeshid = 0;
          m_destmeshid = 1;
          exam2m::addMesh(
              m_meshes[m_sourcemeshid].m_mesharray,
              m_meshes[m_sourcemeshid].m_nchare,
              CkCallback(CkIndex_Driver::meshAdded(), thisProxy));
          exam2m::addMesh(
              m_meshes[m_destmeshid].m_mesharray,
              m_meshes[m_destmeshid].m_nchare,
              CkCallback(CkIndex_Driver::meshAdded(), thisProxy));
        }

        when meshAdded(), meshAdded() {
          serial {
            CkPrintf("Meshes added to ExaM2M library, beginning transfers\n");
            m_timer.emplace_back();
          }

          for (m_curriter = 0; m_curriter < g_totaliter; m_curriter++) {
            // Begin mesh to mesh transfer
            serial {
              m_timer[0].zero();
              m_meshes[m_sourcemeshid].m_mesharray.transferSource();
              m_meshes[m_destmeshid].m_mesharray.transferDest();
            }
            // Solution has been transferred from source to destination, write out
            // meshes and exit.
            when solutionfound() {
              serial {
                CkPrintf("ExaM2M> Library iteration %i completed in: %f sec\n",
                    m_curriter, m_timer[0].dsec());
              }
            }
          }
	}

        // Write out final mesh data
	forall [meshid] (0:1,1) {
		 serial { m_meshes[meshid].m_mesharray.out(meshid); }
		 when written[meshid]() {}
		   }
        serial { mainProxy.finalize(); }
      };
    }

  } // exam2m::

}
