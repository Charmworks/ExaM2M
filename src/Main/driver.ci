// *****************************************************************************
/*!
  \file      src/Main/driver.ci
  \copyright 2020 Charmworks, Inc.
             All rights reserved. See the LICENSE file for details.
  \brief     Charm++ module interface file for Driver
  \details   Charm++ module interface file for Driver
*/
// *****************************************************************************

module driver {

  extern module mesharray;

  include "collidecharm.h";
  include "Controller.hpp";

  namespace exam2m {

    chare [migratable] Driver {
      entry Driver();
      entry void addMesh( const std::string& meshfile );
      entry [reductiontarget] void loaded( std::size_t nelem );
      entry [reductiontarget] void distributed();
      entry [reductiontarget] void mapinserted( std::size_t error );
      entry [reductiontarget] void queried();
      entry [reductiontarget] void responded();
      entry [reductiontarget] void workinserted();
      entry [reductiontarget] void workcreated();
      entry [reductiontarget] void written();
      entry [reductiontarget] void solutionfound();
      entry [reductiontarget] void meshAdded();
      entry [reductiontarget] void solutionSet();
      entry [reductiontarget] void solutionChecked();
      entry void setupDone();
      entry void testDone();

      entry void setup(int num_meshes) {
        forall [meshid] (0:num_meshes - 1,1) {
          when addMesh( const std::string& meshfile ) {
            // Create initial MeshData struct, and begin mesh loading
            serial { initMeshData( meshfile ); }

            // Once loaded, update number of elements and partition
            when loaded[meshid]( std::size_t nelem ) serial {
              updatenelems(meshid, nelem);

              m_meshes[meshid].m_partitioner.partition(
                  m_meshes[meshid].m_nchare );
            }
            when distributed[meshid]() serial {
              m_meshes[meshid].m_partitioner.map();
            }
            when mapinserted[meshid]( std::size_t error ) serial {
              if (error) {
                CkAbort("\n>>> ERROR: A Mapper chare was not assigned any mesh "
                  "elements. This can happen in SMP-mode with a large +ppn "
                  "parameter (number of worker threads per logical node) and is "
                  "most likely the fault of the mesh partitioning algorithm not "
                  "tolerating the case when it is asked to divide the "
                  "computational domain into a number of partitions different "
                  "than the number of ranks it is called on, i.e., in case of "
                  "overdecomposition and/or calling the partitioner in SMP mode "
                  "with +ppn larger than 1. Solution 1: Try a different "
                  "partitioning algorithm (e.g., rcb instead of mj). Solution 2: "
                  "Decrease +ppn.\n");
              } else {
                 m_meshes[meshid].m_mapper.doneInserting();
                 m_meshes[meshid].m_mapper.setup( m_meshes[meshid].m_npoin );
              }
            }
            when queried[meshid]() serial {
              m_meshes[meshid].m_mapper.response();
            }
            when responded[meshid]() serial {
              m_meshes[meshid].m_mapper.create();
            }
            when workinserted[meshid]() serial {
              m_meshes[meshid].m_mesharray.doneInserting();
            }
            when workcreated[meshid]() serial {
              CkPrintf("ExaM2M> Created MeshArraay for mesh %i\n", meshid);
              CkCallback cb(CkReductionTarget(Driver, meshAdded), thisProxy);
              cb.setRefnum(meshid);
              exam2m::addMesh(
                  m_meshes[meshid].m_mesharray,
                  m_meshes[meshid].m_nchare,
                  cb);
            }
            when meshAdded[meshid]() serial {
              CkPrintf("ExaM2M> Linked Worker for mesh %i\n", meshid);
              std::cout << "ExaM2M> Mesh " << meshid << " nelem: "
                        << m_meshes[meshid].m_nelem << ", npoin: "
                        << m_meshes[meshid].m_npoin << '\n';
            }
          }
        }
        serial { thisProxy.setupDone(); }
      }

      entry void doIteration(int num_meshes, int source) {
        serial {
          for (int i = 0; i < num_meshes; i++) {
            if (i == source) {
              m_meshes[i].m_mesharray.transferSource();
            } else {
              m_meshes[i].m_mesharray.transferDest();
            }
          }
        }
      }

      entry void testVsFile(int num_meshes, int source) {
        serial {
          ExampleSolution s1;
          EmptySolution s2;
          for (int i = 0; i < num_meshes; i++) {
            if (i == source)
              m_meshes[i].m_mesharray.setSolution(s1, CkCallback(CkReductionTarget(Driver, solutionSet),thisProxy));
            else
              m_meshes[i].m_mesharray.setSolution(s2, CkCallback(CkReductionTarget(Driver, solutionSet),thisProxy));
          }
        }
        forall [meshid] (0:num_meshes - 1,1) when solutionSet() {}
        serial { m_timer.emplace_back(); m_timer[2].zero(); }
        for (m_curriter = 0; m_curriter < g_totaliter; m_curriter++) {
          // Begin mesh to mesh transfer
          serial {
            m_timer[1].zero();
            thisProxy.doIteration(num_meshes, 0);
          }

          // Solution has been transferred from source to destination, write out
          // meshes and exit.
          when solutionfound() serial {
            CkPrintf("ExaM2M> Iteration %i completed in: %f sec\n", m_curriter, m_timer[1].dsec());
          }
        }
        serial { CkPrintf("ExaM2M> %i iterations completed in: %f sec\n", g_totaliter, m_timer[2].dsec()); }

        // Write out final mesh data
        if (g_mode > 0) {
          forall [meshid] (0:num_meshes - 1,1) {
            serial { m_meshes[meshid].m_mesharray.out(meshid); }
            when written[meshid]() {}
          }
        }
        serial { thisProxy.testDone(); }
      }

      entry void testLinear(int num_meshes) {
        serial {
          LinearSolution s(5,7,8,2);
          for (int i = 0; i < num_meshes; i++) {
            m_meshes[i].m_mesharray.setSolution(s, CkCallback(CkReductionTarget(Driver, solutionSet),thisProxy));
          }
        }
        forall [meshid] (0:num_meshes - 1,1) when solutionSet() {}
        serial {
          m_timer[1].zero();
          thisProxy.doIteration(num_meshes, 0);
        }
        when solutionfound() serial {
          CkPrintf("ExaM2M> Initial transfer to dest completed in: %f sec\n", m_timer[1].dsec());
          LinearSolution s(5,7,8,2);
          for (int i = 0; i < num_meshes; i++) {
            m_meshes[i].m_mesharray.checkSolution(s, CkCallback(CkReductionTarget(Driver, solutionChecked),thisProxy));
          }
        }
        forall [meshid] (0:num_meshes - 1,1) when solutionChecked() {}
        serial {
          m_timer[1].zero();
          thisProxy.doIteration(num_meshes, 1);
        }
        when solutionfound() serial {
          CkPrintf("ExaM2M> Transfer back to source completed in: %f sec\n", m_timer[1].dsec());
          m_timer[1].zero();
          LinearSolution s(5,7,8,2);
          for (int i = 0; i < num_meshes; i++) {
            m_meshes[i].m_mesharray.checkSolution(s, CkCallback(CkReductionTarget(Driver, solutionChecked),thisProxy));
          }
        }
        forall [meshid] (0:num_meshes - 1,1) when solutionChecked() {}
        serial {
          thisProxy.testDone();
        }
      }

      entry void run(int num_meshes) {
        serial {
          m_timer.emplace_back();
          m_timer[0].zero();
          thisProxy.setup(num_meshes);
        }
        when setupDone() serial {
          CkPrintf("ExaM2M> Meshes loaded in: %f sec\n", m_timer[0].dsec());

          m_timer.emplace_back();

          m_timer[0].zero();
          if (g_mode < 3) {
            thisProxy.testVsFile(num_meshes, 0);
          } else {
            thisProxy.testLinear(num_meshes);
          }
        }
        when testDone() serial {
          CkPrintf("ExaM2M> Testing Phase 1 finished in: %f sec\n", m_timer[0].dsec());
          if (g_mode == 2) {
            m_timer[0].zero();
            thisProxy.testLinear(num_meshes);
          } else {
            thisProxy.testDone();
          }
        }
        when testDone() serial {
          if (g_mode == 2) {
            CkPrintf("ExaM2M> Testing Phase 2 finished in: %f sec\n", m_timer[0].dsec());
          }
          mainProxy.finalize();
        }
      };
    }

  } // exam2m::

}
