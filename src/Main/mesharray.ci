// *****************************************************************************
/*!
  \file      src/Transfer/mesharray.ci
  \copyright 2020 Charmworks, Inc.
             All rights reserved. See the LICENSE file for details.
  \brief     Charm++ module interface file for mesharrays holding part of a mesh
  \details   Charm++ module interface file for mesharrays holding part of a mesh.
*/
// *****************************************************************************

module mesharray {

  extern module meshwriter;

  include "UnsMesh.hpp";
  include "Callback.hpp";
  include "CommMap.hpp";

  namespace exam2m {

    array [1D] MeshArray {
      entry MeshArray( const tk::CProxy_MeshWriter& meshwriter,
                       const tk::MeshCallback& cbw,
                       const std::vector< std::size_t >& ginpoel,
                       const tk::UnsMesh::CoordMap& coordmap,
                       const tk::CommMaps& commap,
                       const std::map< int, std::vector< std::size_t > >& bface,
                       const std::vector< std::size_t >& triinpoel,
                       const std::map< int, std::vector< std::size_t > >& bnode,
                       int nchare );
      entry void out( int meshid );
      entry void written();

      entry void solutionFound();
      entry void transferSource();
      entry void transferDest();
    }

  } // exam2m::

}
