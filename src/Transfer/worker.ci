// *****************************************************************************
/*!
  \file      src/Transfer/worker.ci
  \copyright 2020 Charmworks, Inc.
             All rights reserved. See the LICENSE file for details.
  \brief     Charm++ module interface file for workers holding part of a mesh
  \details   Charm++ module interface file for workers holding part of a mesh.
*/
// *****************************************************************************

module worker {

  extern module meshwriter;
  extern module worker;

  include "UnsMesh.hpp";
  include "Callback.hpp";
  include "CommMap.hpp";
  include "collidecharm.h";

  namespace exam2m {

    class PotentialCollision;
    class SolutionData;
    class CProxy_WorkerStats;

    initnode void registerBboxDimMinMaxType(void);
    initnode void registerBboxDimHistType(void);

    array [1D] Worker {
      entry Worker( int firstchunk,
                    const tk::CProxy_MeshWriter& meshwriter,
                    const tk::WorkerCallback& cbw,
                    const std::vector< std::size_t >& ginpoel,
                    const tk::UnsMesh::CoordMap& coordmap,
                    const tk::CommMaps& commap,
                    const std::map< int, std::vector< std::size_t > >& bface,
                    const std::vector< std::size_t >& triinpoel,
                    const std::map< int, std::vector< std::size_t > >& bnode,
                    int nchare,
                    const CProxy_WorkerStats& workerStatsProxy );
      entry void out( int meshid );
      entry void written();
      entry void background();
      entry void collideVertices();
      entry void collideTets();
      entry void processCollisions( CProxy_Worker proxy,
                                    int nchares,
                                    int offset,
                                    int nColls,
                                    Collision colls[nColls] );
      entry void determineActualCollisions( CProxy_Worker proxy,
                                            int index,
                                            int nColls,
                                            PotentialCollision colls[nColls] );
      entry void transferSolution( std::size_t nPoints,
                                   SolutionData soln[nPoints] );
      entry void computeHist(double bucketSize[3], double min[3], double max[3], int numBuckets);
    };

    chare WorkerStats {
      entry WorkerStats(CProxy_Worker workerProxy);
      entry [reductiontarget] void receiveMinMaxData(CkReductionMsg *msg);
      entry [reductiontarget] void receiveHistData(CkReductionMsg *msg);
    };

  } // exam2m::

}
