// *****************************************************************************
/*!
  \file      src/Transfer/worker.ci
  \copyright 2020 Charmworks, Inc.
             All rights reserved. See the LICENSE file for details.
  \brief     Charm++ module interface file for workers holding part of a mesh
  \details   Charm++ module interface file for workers holding part of a mesh.
*/
// *****************************************************************************

module worker {

  extern module meshwriter;
  extern module worker;

  include "UnsMesh.hpp";
  include "Callback.hpp";
  include "CommMap.hpp";
  include "collidecharm.h";

  namespace exam2m {

    class PotentialCollision;
    class SolutionData;

    array [1D] Worker {
      entry Worker( std::size_t firstchunk,
                    const tk::CProxy_MeshWriter& meshwriter,
                    const tk::WorkerCallback& cbw,
                    const std::vector< std::size_t >& ginpoel,
                    const tk::UnsMesh::CoordMap& coordmap,
                    const tk::CommMaps& commap,
                    const std::map< int, std::vector< std::size_t > >& bface,
                    const std::vector< std::size_t >& triinpoel,
                    const std::map< int, std::vector< std::size_t > >& bnode,
                    int nchare );
      entry void out( int meshid );
      entry void written();
      entry void collideVertices();
      entry void collideTets();
      entry void processCollisions( CProxy_Worker proxy,
                                    std::size_t nchares,
                                    std::size_t offset,
                                    int nColls,
                                    Collision colls[nColls] );
      entry void determineActualCollisions( CProxy_Worker proxy,
                                            int index,
                                            int nColls,
                                            PotentialCollision colls[nColls] );
      entry void transferSolution( int nPoints,
                                   SolutionData soln[nPoints] );
    }

  } // exam2m::

}
